name: Run Tests on Push and PR

on:  # 어떤 이벤트에 반응할지 설정
  push:
    branches: [ main, dev ]  # main, develop 브랜치에 push가 있을 때 실행
  pull_request:
    branches: [ main, dev]  # main, develop 브랜치로 PR 보낼 때 실행

jobs:
  test:
    runs-on: ubuntu-latest  # GitHub가 제공하는 우분투 환경에서 실행

    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
      KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
      NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
      NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
      NAVER_REDIRECT_URI: ${{ secrets.NAVER_REDIRECT_URI }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
      S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
      S3_REGION: ${{ secrets.S3_REGION }}
      CLOUD_FROUNT_PATH: ${{ secrets.CLOUD_FRONT_PATH }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3  # 깃허브 코드 받아오기

      - name: Gradle 캐시 설정
        uses: actions/cache@v3
        with:
          path:
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Java 17 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  # Adoptium에서 제공하는 JDK
          java-version: '17'

      - name: Create application-test.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_TEST_YML }}" > src/main/resources/application-test.yml

      - name: gradlew 실행 권한 추가
        run: chmod +x ./gradlew

      - name: 테스트 실행
        run: ./gradlew test

      - name: 테스트 리포트 업로드
        if: always() # 테스트가 실패해도 리포트를 업로드
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/test

  deploy:
    if: github.ref == 'refs/heads/main'  # main 브랜치에 push 되었을 때만 실행
    needs: test  # test job이 먼저 실행된 후 실행
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/myapp-cd
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" > .env
            echo "DB_URL=${{ secrets.DB_URL }}" > .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" > .env
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
            echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> .env
            echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
            echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env
            echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env
            echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
            echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env
            echo "NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> .env
            echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> .env
            echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> .env
            echo "S3_REGION=${{ secrets.S3_REGION }}" >> .env
            echo "CLOUD_FROUNT_PATH=${{ secrets.CLOUD_FRONT_PATH }}" >> .env
            docker-compose pull
            docker-compose down
            docker-compose up -d
